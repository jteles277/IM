<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>CASA VIVA + Assistant</title>


    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@500&display=swap" rel="stylesheet">

    <style>
      body {
        --indicator-color: black;
        background: #fff; /*radial-gradient(#fff 75%, var(--indicator-color));*/
        min-height: 100vh; 
        font-family: Poppins;
        margin: 0;
        padding: 0;
      }
      .mic{
        width: 150px;
      }

      .container {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 50%;
        border-radius: 10px;
        background-color: #f0f0f0;
      }
    
      .responseText{
        border: solid 2px #8ea7cf;
        margin: 2%;
        color: #41683a;
      }
    
      .bottomNav{
        position: absolute;
        bottom: 2%;
        width: 95%;
      }
      .recognized{
        font-size:x-large;
      }
      .rightSide {
        position: absolute;
        right: 0;
        top: 0;
        width: 40%;
        height: 100%;
        overflow-y: auto; /* Make right side scrollable */
        background-color: #f9f9f9;
        padding: 10px;
        box-shadow: -2px 0 5px rgba(0,0,0,0.1);
      }
      .leftSide {  
        width: 50%;
        max-height: calc(70vh - 120px); /* Adjust the height to leave space for bottomNav */
        margin-left: 3%;
        overflow-y: auto;
        background-color: #f9f9f9;
        padding: 10px;
        box-shadow: -2px 0 5px rgba(0,0,0,0.1);
      }
      .box {
        background-color: #e0e0e0;
        border: 1px solid #ccc;
        border-radius: 5px;
        padding: 10px;
        margin-bottom: 10px;
      }
      .email-label {
        color: #666; /* Lighter color */
        font-size:medium; /* Smaller size */
      }

      .hovered-email {
        border: 3px solid #8ea7cf;
      }
      .unselectable {
        -webkit-touch-callout: none;
        -webkit-user-select: none;
        -khtml-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
      }

    </style>
  </head>
  <body>
    <h1 style="padding: 1%;margin: 0;">Gmail Assistant</h1>
   <!-- <p>Click the button below and start speaking.</p>
    <button id="start-btn">Start</button>
    -->


    <div class="leftSide" id="leftSide">
      <!-- Boxes will be dynamically added here -->
        
    </div>

    

    <div class="bottomNav .unselectable">
      <div id="response" class=""  style=""></div>
      <div class="container" style="border: solid 2px #4F5D73;margin: 2%;"> 

        <svg class="mic unselectable" id="mic" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
          viewBox="0 0 100 100" style="enable-background:new 0 0 100 100;" xml:space="preserve">
        <style class="unselectable" type="text/css">
         .st01{fill:#4F5D73;}
         .st1{opacity:0.2;}
         .st2{fill:#231F20;}
         .st3{fill:#4F5D73;}
         .st4{fill:#FFFFFF;}
        </style>
       <defs>
         <filter id="f1" x="0" y="0">
           <feGaussianBlur in="SourceGraphic" stdDeviation="1" />
         </filter>
       </defs>
           <circle class="st0" cx="50" cy="50" r="32"/>
       <g id="Layer_1"  transform="translate(18,18)" >
         <g class="st1"  >
               <path class="st2" d="M32,41.5c3.3,0,6-2.7,6-6v-18c0-3.3-2.7-6-6-6s-6,2.7-6,6v18C26,38.8,28.7,41.5,32,41.5z"/>
         </g>
         <g class="st1">
             <path class="st2" d="M32,48.2c-7.2,0-13-5.8-13-13v-3.8c0-0.8,0.7-1.5,1.5-1.5s1.5,0.7,1.5,1.5v3.8c0,5.5,4.5,10,10,10
               s10-4.5,10-10v-3.8c0-0.8,0.7-1.5,1.5-1.5s1.5,0.7,1.5,1.5v3.8C45,42.4,39.2,48.2,32,48.2z"/>
         </g>
         <g class="st1">
             <path class="st2" d="M32,55c-0.8,0-1.5-0.7-1.5-1.5v-6c0-0.8,0.7-1.5,1.5-1.5s1.5,0.7,1.5,1.5v6C33.5,54.3,32.8,55,32,55z"/>
         </g>
         <g class="st1">
             <path class="st2" d="M37,56H27c-0.8,0-1.5-0.7-1.5-1.5S26.2,53,27,53h10c0.8,0,1.5,0.7,1.5,1.5S37.8,56,37,56z"/>
         </g>
           <path class="st3" d="M32,39.5c3.3,0,6-2.7,6-6v-18c0-3.3-2.7-6-6-6s-6,2.7-6,6v18C26,36.8,28.7,39.5,32,39.5z"/>
           <path class="st4" d="M32,46.2c-7.2,0-13-5.8-13-13v-3.8c0-0.8,0.7-1.5,1.5-1.5s1.5,0.7,1.5,1.5v3.8c0,5.5,4.5,10,10,10
             s10-4.5,10-10v-3.8c0-0.8,0.7-1.5,1.5-1.5s1.5,0.7,1.5,1.5v3.8C45,40.4,39.2,46.2,32,46.2z"/>
           <path class="st4" d="M32,53c-0.8,0-1.5-0.7-1.5-1.5v-6c0-0.8,0.7-1.5,1.5-1.5s1.5,0.7,1.5,1.5v6C33.5,52.3,32.8,53,32,53z"/>
           <path class="st4" d="M37,54H27c-0.8,0-1.5-0.7-1.5-1.5S26.2,51,27,51h10c0.8,0,1.5,0.7,1.5,1.5S37.8,54,37,54z"/>
       </g>
       </svg>
    
          <div class="recognized unselectable" style="display: inline; vertical-align: center; top: auto;bottom: auto; width: 600px;" id="transcript"></div>
    
        </div>
    </div>

  

    <div id="energy"></div> 
    <div class="rightSide" id="rightSide">
      <div class="searchRequest" id="searchRequest" style="margin: 2%;">Emails mais recentes: </div>
      <div id="boxes">  
      </div>
      <!-- Boxes will be dynamically added here -->
    </div>

    <script src="https://cdn.jsdelivr.net/npm/@svgdotjs/svg.js@latest/dist/svg.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/onnxruntime-web/dist/ort.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@ricky0123/vad-web@0.0.7/dist/bundle.min.js"></script>
    <script src="js/mmi.js"></script>
    <script src="js/globals.js"></script>
    <script src="js/jquery-3.6.4.min.js"></script>
    <script src="js/webtoolkit.utf8.js"></script>


    <script type="text/javascript" src="js/recorder.js"></script>
    <script type="text/javascript" src="js/microphone.js"></script>
    <script type="text/javascript" src="kws__/edge-impulse-standalone.js"></script>
    <script type="text/javascript" src="kws__/run-impulse.js"></script>

<script type="module">

let emailCounter = 0; 
let currentlyHoveredEmailId = null;
let emailDict = {};

var isOnKWS=false;
const sensor = new MicrophoneSensor();
  let classifyCache = {};
  let allData = [];
  let allClassifications = [];
  let casa_vivaStarted = null;

async function startkws(){
  classifyCache = {};
  allData = [];
  allClassifications = [];
  casa_vivaStarted = null;

  isOnKWS=false;
  //await sensor.takeSample(200, 16000, () => {});
  sensor.takeSample(1000, 16000, () => {}).then(onSampleComplete);
}

setTimeout(function(){
  classifyCache = {};
  allData = [];
  allClassifications = [];
  casa_vivaStarted = null;
}, 60*60*1000);

const onSampleComplete = (obj) => {
    if(!isOnKWS)
    sensor.takeSample(500, 16000, () => {}).then(onSampleComplete);

    allData = allData.concat(obj.values);
    //console.log(Date.now(), 'allData is', allData.length / 16000, 'seconds');

    const windowSize = 3 * 16000;
    const windowStep = 0.5 * 16000;
    const classifyWindowLength = 0.5 * 16000;
    const classifyWindowOverlap = 0.25 * 16000;

    // if we have at least one window of data...
    if (allData.length >= windowSize) {
      let window = allData.slice(allData.length - windowSize, allData.length);

      let noiseCount = 0;
      let casa_vivaCount = 0;
      let uncertainCount = 0;

      // in here we'll take 1 second slices, with 300 ms. overlap that we then classify (total 14 windows)
      console.time('classifyWindow');
      for (let wx = 0; wx <= windowSize - classifyWindowLength; wx += classifyWindowOverlap) {
        const cacheKey = allData.length - windowSize + wx;

        let classifyResult;
        if (!classifyCache[cacheKey]) {
            let slice = window.slice(wx, wx + classifyWindowLength);

            classifyCache[cacheKey] = classifier.classify(slice, false);
        }

        classifyResult = classifyCache[cacheKey];
        let noise = classifyResult.results.find(r => r.label === 'noise').value;
        let casa_viva = classifyResult.results.find(r => r.label === 'casa_viva').value;

if(casa_viva>.3)
        console.log(casa_viva);
        if (noise >= 0.6) {
            noiseCount++;
        }
        else if (casa_viva >= 0.6) {
            casa_vivaCount++; 
            
            if(!isOnKWS){
              recognition.start();
              circle.animate(20, 0, 'now').attr({ fill: '#00a431' });
              transcriptDiv.textContent = "...";
              isOnKWS=true;
            }
              
        }
        else {
            uncertainCount++;
        }
      }
    }
    //console.timeEnd('classifyWindow');
  };

async function InitializeKWS(){
  const classifier = window.classifier = new EdgeImpulseClassifier();
  await classifier.init();
  await sensor.init();
  if (!sensor.hasSensor()) {
    alert('Your device does not seem to have a microphone');
  }
  // start up the sensor
  //await sensor.takeSample(200, 16000, () => {});

  // then take 1s of data
  sensor.takeSample(500, 16000, () => {}).then(onSampleComplete);
};
//InitializeKWS();


  import { interpolateGreens } from "https://cdn.skypack.dev/d3-scale-chromatic@3"

  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
  const recognition = new SpeechRecognition();
  recognition.continuous = false;
  recognition.interimResults = true;
  recognition.lang = 'pt-PT';


  var circle = SVG.find('.st0');//.fill('#ccc');    
  const startBtn = document.getElementById('start-btn');
  const transcriptDiv = document.getElementById('transcript');
  const energyDiv = document.getElementById('energy');

  var firstSent = "Toque no microfone para comecar a falar.";
  transcriptDiv.textContent = firstSent;
  var resetfunc ;


  recognition.onerror = function(event) {
    console.error("REC ERROR"+event.error);
    transcriptDiv.innerHTML = firstSent;
    circle.animate(20, 0, 'now').attr({ fill: '#000' });
    //startkws();
    resetfunc = setTimeout(function(){
      transcriptDiv.innerHTML = firstSent;
      recognition.start();
      circle.animate(20, 0, 'now').attr({ fill: '#00a431' });
    }, 500);
  };

  recognition.onresult = function(event) {
    speechActive=false;
    var interim_transcript = '';
    var final_transcript = '';

    for (var i = event.resultIndex; i < event.results.length; ++i) {
      if (event.results[i].isFinal) {
        //if(event.results[i][0].confidence>0.6)
        //energyDiv.textContent += event.results[i][0].confidence;
        {
          final_transcript ="";
          console.log("++"+event.results[i][0].transcript+"++");
          final_transcript=event.results[i][0].transcript.trim();
          /*var sentence = event.results[i][0].transcript.trim().toLowerCase();
          if(sentence.startsWith("casa viva") || sentence.startsWith("viva") || sentence.startsWith("aviva") || sentence.startsWith("sa viva") || sentence.startsWith("da viva") ||sentence.startsWith("ora viva"))
          {
            var indSent = sentence.indexOf("viva");
            final_transcript= sentence.slice(indSent+5);
          }*/
        }

        if(final_transcript.length>2){
          final_transcript = final_transcript.charAt(0).toUpperCase()+ final_transcript.slice(1);
          transcriptDiv.innerHTML = "<span style='color:#00b44e'><b>"+final_transcript+"</b></span>";

          sendMMI(final_transcript);
          circle.animate(20, 0, 'now').attr({ fill: '#000' });
          //startkws();
          
        }else{
          transcriptDiv.innerHTML = "<span style='color:#ff9494'><b>Desculpe nao consegui ententer.</b></span>";
        }

        resetfunc = setTimeout(function(){
          transcriptDiv.innerHTML = firstSent;
          recognition.start();
          circle.animate(20, 0, 'now').attr({ fill: '#00a431' });
        }, 1000);

        speechActive = false;
      }else{
        //if(event.results[i][0].confidence>0.6)
        {
          console.log(event.results[i][0].transcript + " -- " + i);
          var sentence = event.results[i][0].transcript.trim().toLowerCase();
          /*if(sentence.startsWith("casa viva") || sentence.startsWith("viva") || sentence.startsWith("aviva") || sentence.startsWith("sa viva") || sentence.startsWith("da viva") ||sentence.startsWith("ora viva") ){
            var indSent = sentence.indexOf("viva");
            final_transcript= sentence.slice(indSent+5);
          }*/

        }
        transcriptDiv.textContent = event.results[i][0].transcript.trim().toLowerCase();
      }
    }
  };

  $(".mic").on('click', function(){
    stopSpeak();
    recognition.start();
    circle.animate(20, 0, 'now').attr({ fill: '#00a431' });
    console.log("start"); 
  })
  

  var vadActive = false;
  var speechActive = true;

  async function main() {
    const myvad = await vad.MicVAD.new({

      onSpeechEnd: (audio) => {
        // do something with `audio` (Float32Array of audio samples at sample rate 16000)...
        //transcriptDiv.textContent += "-";
        vadActive = false;
        setTimeout(function(){
          if(speechActive) recognition.stop();
          speechActive=false;
        }, 3000);
      },
      onSpeechStart: ()=>{
        //transcriptDiv.textContent += " ->";
        if(!speechActive){
          speechActive=true;
          recognition.start();
          transcriptDiv.textContent = "...";
        }
        clearTimeout(resetfunc);
        vadActive=true;
      },
      onFrameProcessed: (probs) => {
        if(vadActive || speechActive){
          const indicatorColor = interpolateGreens(probs.isSpeech / 1.5);
          //circle.fill(indicatorColor);
          circle.animate(20, 0, 'now').attr({ fill: indicatorColor });
        } 
        //    energyDiv.textContent = probs.isSpeech + "--" + probs.notSpeech;  
        //document.body.style.setProperty("--indicator-color", indicatorColor)
      },
    })
    //myvad.start()



  
  }
  //main()

  if ('speechSynthesis' in window) {
	  console.log('Your browser <strong>supports</strong> speech synthesis.');
  }

  var ttsSpeaker;
  window.speechSynthesis.onvoiceschanged = function(e) {
    var voices = speechSynthesis.getVoices();
    ttsSpeaker = voices[0];
    for (let i = 0; i < voices.length; i++) { 
      console.log(voices[i]);
      if(voices[i].lang=="pt-PT"){
        console.log("oi");
        console.log(voices[i]);
        console.log(voices[i].lang);
        if(voices[i].name.includes("Helia")) ttsSpeaker=voices[i];
      }
      

    }

    console.log(ttsSpeaker);
  };
  
  function speak(text){ 
    var msg = new SpeechSynthesisUtterance();
    msg.text = text;
  
    // Set the attributes.
    msg.volume = parseFloat(1);
    msg.rate = parseFloat(1.1);
    msg.pitch = parseFloat(1);

    msg.voice = ttsSpeaker;

    window.speechSynthesis.speak(msg);
  }

  function stopSpeak(text){
 
    window.speechSynthesis.cancel();
  }
  /////////////////////////////////////////


  var mmiCli_1 = null;
  mmiCli_1 = new MMIClient(null, mmi_fusion + "SPEECHIN");

  function sendMMI(final_transcript){

    var obj = new Object();
    obj.text = final_transcript;
    $.post( "http://127.0.0.1:5005/model/parse", JSON.stringify(obj), function( data ) {
    console.log("UWU");
    console.log(data);

 
    if(data.intent.name=='change_color'){
      var shape='' ;
      var color='' ;

      for (let i = 0; i < data.entities.length; i++)
      {
        if(data.entities[i].entity=='shape')
    	    shape=data.entities[i].value;
        if(data.entities[i].entity=='color')
    	    color=data.entities[i].value;
      }
  
      var message = {'intent':'change_color','shape':shape,'color':color}
      var messaget = btoa(unescape(encodeURIComponent(final_transcript)));
      var result = { "recognized" : ["SPEECH", "SPEECHIN", "APP"], "text": messaget, "nlu": message };
      mmiCli_1.sendToIM(new LifeCycleEvent("SPEECHIN", "IM", "text-1", "ctx-1").
            doExtensionNotification(new EMMA("text-", "text", "command", 1, 0).
            setValue(JSON.stringify(result))));
            
    }else {
       
      manageCall(data.intent.name, data);
  
    }


  });

  /*
    
            */
  }
 // sendMMI("mudar para verde o circulo");
  

  var mmiCli_Out_add = "wss://"+host+":8005/IM/USER1/";
  var mmiCli_Out = null;
  mmiCli_Out = new MMIClientSocket(mmiCli_Out_add + "SPEECHOUT");
  mmiCli_Out.onMessage.on(im1MessageHandler);
  mmiCli_Out.onOpen.on(socketOpenHandler);
	mmiCli_Out.openSocket();


  function socketOpenHandler(event) {
    console.log("---------------openSocketHandler---------------")

    if(mmiCli_Out.socket.readyState !== WebSocket.OPEN)
    {
        return;
    }
  }

  function im1MessageHandler(data) {

    console.log("--------------im1MessageHandler---------------");

    if(data != null && data!="RENEW" && data!="OK") {

      console.log(data);

      var content = $(data).find("emma\\:interpretation").first().text().trim();

      if (typeof content == 'string') {
        try {
          // Try to parse XML
          var xml = $.parseXML(content.replace(/\\"/g, "\"").slice(1,-1));

          // Extract sentence
          let text = $(xml).find("p").text();
          //let text = Utf8.decode(atob(sentence.slice(2,-1)));

          console.log(text);
          speak(text);

          $("#response").html(text);
          $("#response").addClass("container");
          $("#response").addClass("responseText");

          setTimeout(function(){
            $("#response").html("");
            $("#response").removeClass("container");
            $("#response").removeClass("responseText");
          }, 3000);

        }
        catch (e) { console.log(e); }

      }
    }
  }

  /////////////////////////////////////////

  
  //sendMMI("Ligar as luzes")
  // Function to add a box with specified content
  function addBox(email) {
    
    emailCounter++;
    emailDict[emailCounter] = email;

    const boxes = document.getElementById('boxes');
    const box = document.createElement('div');
    box.className = 'box';
    box.id = 'email' + emailCounter;

    const fromElement = document.createElement('div');
    fromElement.innerHTML = ` ${email.from}`;
    box.appendChild(fromElement);

    const subjectElement = document.createElement('div');
    subjectElement.innerHTML = `<span class="email-label">Assunto:</span> ${email.subject}`;
    box.appendChild(subjectElement);

    box.addEventListener('click', () => showFullEmail(email, box.id));
    boxes.appendChild(box);
  }

  function deleteAllEmailBoxes() { 
    emailCounter = 0;
    const boxes = document.getElementById('boxes');
    boxes.innerHTML = '';
  }

  function showFullEmail(email, emailId) {
    const leftSide = document.getElementById('leftSide');
    leftSide.innerHTML = `
      <h2><span class="email-label"></span> ${email.from}</h2>
      <h3><span class="email-label">para:</span> ${email.to}</h3>
      <h3><span class="email-label"></span> ${email.subject}</h3>
      <p>${email.text}</p>
    `;
    hoverEmail(emailId);
  }

  function openCurrentlyHoveredEmail() {
    if (currentlyHoveredEmailId) {
      const emailToOpen = document.getElementById(currentlyHoveredEmailId);
      if (emailToOpen) {
        emailToOpen.click();
      }
    }
  }
  
  function manageCall(type, data){

    console.log(recognition.abort());

    if (type == 'ver_emails_recentes'){
      var timespan = '' ; 

      for (let i = 0; i < data.entities.length; i++)
      {
        if(data.entities[i].entity=='timespan')
          timespan=data.entities[i].value; 
      }
      console.log(timespan);
      if(timespan=='último'){
        document.getElementById('searchRequest').innerText = "Email mais recente: ";
        deleteAllEmailBoxes();
        fetchEmails("http://127.0.0.1:5000/gmail-emails?max_results=", 1)
      }
      else if(timespan=='últimos'){
        document.getElementById('searchRequest').innerText = "Emails mais recentes: ";
        deleteAllEmailBoxes();
        fetchEmails("http://127.0.0.1:5000/gmail-emails?max_results=", 50)
      }
      else if(timespan=='hoje'){
        document.getElementById('searchRequest').innerText = "Emails recebidos hoje: ";
        deleteAllEmailBoxes();
        fetchEmails("http://127.0.0.1:5000/gmail-emails-by-time?since=today&max_results=", 50)
      }
      else if(timespan=='ontem'){
        document.getElementById('searchRequest').innerText = "Emails recebidos ontem: ";
        deleteAllEmailBoxes();
        fetchEmails("http://127.0.0.1:5000/gmail-emails-by-time?since=yesterday&max_results=", 50)
      }
      else 
      {
        document.getElementById('searchRequest').innerText = "Emails mais recentes: ";
        deleteAllEmailBoxes();
        fetchEmails("http://127.0.0.1:5000/gmail-emails?max_results=", 50)
      }
  
    }

    if(type == 'ver_emails_por_tag'){

      var tag = ''; 

      for (let i = 0; i < data.entities.length; i++)
      {
        if(data.entities[i].entity=='tag')
          tag=data.entities[i].value; 
      }
      console.log(tag);
      if (tag == "favoritos" || tag == "com estrela") {
        document.getElementById('searchRequest').innerText = "Emails com estrela: ";
        deleteAllEmailBoxes();
        fetchEmails("http://127.0.0.1:5000/gmail-emails?label=" + "STARRED" + "&max_results=", 10)
        
      }else if (tag == "não lidos" || tag == "não lidas" ) {
        document.getElementById('searchRequest').innerText = "Emails não lidos: ";
        deleteAllEmailBoxes();
        fetchEmails("http://127.0.0.1:5000/gmail-emails?label=" + "UNREAD" + "&max_results=", 10)

      }else if (tag == "spam") {
        document.getElementById('searchRequest').innerText = "Emails de SPAM: ";
        deleteAllEmailBoxes();
        fetchEmails("http://127.0.0.1:5000/gmail-emails?label=" + "SPAM" + "&max_results=", 10)

      }else if (tag == "família") {
        document.getElementById('searchRequest').innerText = "Emails da tag 'família': ";
        deleteAllEmailBoxes();
        fetchEmails("http://127.0.0.1:5000/gmail-emails?label=" + "Label_2058551123512434883" + "&max_results=", 10)

      }else if (tag == "enviados") {
        document.getElementById('searchRequest').innerText = "Emails enviados: ";
        deleteAllEmailBoxes();
        fetchEmails("http://127.0.0.1:5000/gmail-emails?label=" + "SENT" + "&max_results=", 10)

      }else if (tag != "") {
        document.getElementById('searchRequest').innerText = "Emails da tag: " + tag;
        deleteAllEmailBoxes();
        fetchEmails("http://127.0.0.1:5000/gmail-emails?label=" + tag + "&max_results=", 10)
      }else{

      }
    }

    if(type == 'tag_email'){

      var tag = ''; 
      var msg_id= emailDict[parseInt(currentlyHoveredEmailId.substring(5))].id; 
 
      for (let i = 0; i < data.entities.length; i++)
      {
        if(data.entities[i].entity=='tag')
          tag=data.entities[i].value; 
      }
      
      if (tag == "favoritos" || tag == "com estrela") {
        //document.getElementById('energy').innerText = "Email classificado com estrela!"; 
        ClassifyEmail("http://127.0.0.1:5000/classify-emails?email_id=" + msg_id + "&label_name=" + "STARRED")
        speak("Email classificado com estrela!");

      }else if (tag == "não lido" || tag == "não lidas" || tag == "não lidos") {
        //document.getElementById('energy').innerText = "Email cassificado como não lido!"; 
        ClassifyEmail("http://127.0.0.1:5000/classify-emails?email_id=" + msg_id + "&label_name=" + "UNREAD")
        speak("Email classificado como não lido!");

      }else if (tag == "spam") {
        //document.getElementById('energy').innerText = "Email cassificado como SPAM!"; 
        ClassifyEmail("http://127.0.0.1:5000/classify-emails?email_id=" + msg_id + "&label_name=" + "SPAM")
        speak("Email classificado como SPAM!");

      }else if (tag == "família") {
        //document.getElementById('energy').innerText = "Email cassificado!"; 
        ClassifyEmail("http://127.0.0.1:5000/classify-emails?email_id=" + msg_id + "&label_name=" + "Label_2058551123512434883")
        speak("Email classificado!");

      }else{

      }


    }

    if(type == 'selecionar'){

      var numero = '' ; 
      var action = '';

      for (let i = 0; i < data.entities.length; i++)
      {
        if(data.entities[i].entity=='numero')
          numero=data.entities[i].value;
        if(data.entities[i].entity=='action')
          action=data.entities[i].value; 
      }

      if (action == 'abrir' || action == 'ver') {

        if (numero == '') {
          openCurrentlyHoveredEmail();
        }
        else if(numero == 'primeiro'){
          hoverEmail('email' + 1);
          openCurrentlyHoveredEmail();
        } 
        else if(numero == 'segundo'){
          hoverEmail('email' + 2);
          openCurrentlyHoveredEmail();
        } 
        else if(numero == 'terceiro'){
          hoverEmail('email' + 3);
          openCurrentlyHoveredEmail();
        } 
        else if(numero == 'quarto'){
          hoverEmail('email' + 4);
          openCurrentlyHoveredEmail();
        } 
      }else if (action == 'ler') {
        if (numero == '') {
          openCurrentlyHoveredEmail();
          speak(emailDict[parseInt(currentlyHoveredEmailId.substring(5))].text);
        }
        else if(numero == 'primeiro'){
          hoverEmail('email' + 1);
          openCurrentlyHoveredEmail();
          speak(emailDict[parseInt(currentlyHoveredEmailId.substring(5))].text);
        } 
        else if(numero == 'segundo'){
          hoverEmail('email' + 2);
          openCurrentlyHoveredEmail();
          speak(emailDict[parseInt(currentlyHoveredEmailId.substring(5))].text);
        } 
        else if(numero == 'terceiro'){
          hoverEmail('email' + 3);
          openCurrentlyHoveredEmail();
          speak(emailDict[parseInt(currentlyHoveredEmailId.substring(5))].text);
        } 
        else if(numero == 'quarto'){
          hoverEmail('email' + 4);
          openCurrentlyHoveredEmail();
          speak(emailDict[parseInt(currentlyHoveredEmailId.substring(5))].text);
        } 
       
      }else {
        
        if (numero == '') {
          openCurrentlyHoveredEmail();
        }
        else if(numero == 'primeiro'){
          hoverEmail('email' + 1);
          openCurrentlyHoveredEmail();
        } 
        else if(numero == 'segundo'){
          hoverEmail('email' + 2);
          openCurrentlyHoveredEmail();
        } 
        else if(numero == 'terceiro'){
          hoverEmail('email' + 3);
          openCurrentlyHoveredEmail();
        } 
        else if(numero == 'quarto'){
          hoverEmail('email' + 4);
          openCurrentlyHoveredEmail();
        } 
      }
    }

    if(type == 'move_up'){
      if (parseInt(currentlyHoveredEmailId.substring(5)) > 1) {
        hoverEmail('email' + (parseInt(currentlyHoveredEmailId.substring(5)) - 1));
      }  
    }

    if(type == 'move_down'){
      console.log(currentlyHoveredEmailId);
      if (parseInt(currentlyHoveredEmailId.substring(5)) < emailCounter) {
        hoverEmail('email' + (parseInt(currentlyHoveredEmailId.substring(5)) + 1));
      }  
    }

    if(type == 'help'){
      var importance = ''; 

      for (let i = 0; i < data.entities.length; i++)
      {
        if(data.entities[i].entity=='importance')
          importance=data.entities[i].value; 
      }
      console.log(importance);
      if (importance == "completa") {
        speak("Pode pedir para ver emails recentes, por tag, de uma pessoa específica, classificar, selecionar ,ler emails, mover para cima, mover para baixo, e pedir ajuda.");
        
      }else{
        speak('Pode dizer "Ver emails recentes" ou "Recebi algum email?" para pedir para ver emails recentes');

      }
    }

    if(type == 'ver_emails_por_pessoa'){
      var person = ''; 

      for (let i = 0; i < data.entities.length; i++)
      {
        if(data.entities[i].entity=='person')
          person=data.entities[i].value; 
      }
      console.log(person);
      if (person == "Ágata") {
        document.getElementById('searchRequest').innerText = "Emails de Agatha: ";
        deleteAllEmailBoxes();
        fetchEmails("http://127.0.0.1:5000/gmail-emails-by-sender?sender=" + "Agatha" + "&max_results=", 10)
        
      }else if (person == "Linkedin") {
        document.getElementById('searchRequest').innerText = "Emails de Linkedin: ";
        deleteAllEmailBoxes();
        fetchEmails("http://127.0.0.1:5000/gmail-emails-by-sender?sender=" + "Linkedin" + "&max_results=", 10)

      }else if (person == "Inês Cruz") {
        document.getElementById('searchRequest').innerText = "Emails de Inês Cruz: ";
        deleteAllEmailBoxes();
        fetchEmails("http://127.0.0.1:5000/gmail-emails-by-sender?sender=" + "Inês Cruz" + "&max_results=", 10)

      }else if (person == "Professor teste") {
        document.getElementById('searchRequest').innerText = "Emails de Professor teste: ";
        deleteAllEmailBoxes();
        fetchEmails("http://127.0.0.1:5000/gmail-emails-by-sender?sender=" + "Professor teste" + "&max_results=", 10)

      }else{

      }
    }
  }
  

  function hoverEmail(emailId) {
    console.log("hoverEmail");
    // Remove the hover class from all email items
    const emailItems = document.querySelectorAll('.box');
    emailItems.forEach(item => item.classList.remove('hovered-email'));

    // Add the hover class to the specified email item 
    const emailToHover = document.getElementById(emailId);
      if (emailToHover) {
        emailToHover.classList.add('hovered-email');
        currentlyHoveredEmailId = emailId;
      }
  }

  async function ClassifyEmail(url) {
    try {
        const response = await fetch(url, {
          method: "POST"
          }
        );
        const emails = await response.json(); 
        console.log("it worked!");
    } catch (error) {
        console.error('Error fetching emails:', error);
    }
  }

  async function fetchEmails(url, n) {
    try {
        const response = await fetch(url + n); // Adjust the port if necessary
        //http://127.0.0.1:5000/gmail-emails-by-time?timespan=2024/01/02
        //http://127.0.0.1:5000/gmail-emails?max_results='+n
        const emails = await response.json();
 
        emails.forEach(email => {
          addBox(email);  
        });
        // Example usage: hover the first email
        hoverEmail('email1');
    } catch (error) {
        console.error('Error fetching emails:', error);
    }
  }

// Fetch emails when the page loads
document.addEventListener('DOMContentLoaded', fetchEmails("http://127.0.0.1:5000/gmail-emails?max_results=", 10));

 
</script> 



  </body>
</html>